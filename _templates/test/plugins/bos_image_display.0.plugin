a:11:{s:4:"name";s:17:"bos_image_display";s:6:"status";s:1:"1";s:6:"author";s:17:"Maurizio Boscarol";s:10:"author_uri";s:31:"http://www.zanzareazanzibar.it/";s:7:"version";s:4:"0.44";s:11:"description";s:96:"Some tags for a simple image gallery by category, without to deal with article and article image";s:4:"help";s:19399:"<style type="text/css">
dl dt {font-weight: bold; font-style: italic;}
dl dd {margin-bottom: 2em;}
h2 {font-size: 150%;}
dl {margin-left: 5%;}
div.codice {margin-left: 5%!important; border: 1px solid #ccc;}
div.help_plugin p {margin-left: 3%;}
</style>
<div class="help_plugin">
<h1>Help</h1>
<ul><li><a href="#overview">Overview</a></li><li><a href="#tags">Tags reference</a></li><li><a href="#usage">Usage Example</a></li></ul>

<h2 id="overview">Overview</h2>
<p>Out of the box you can use it as a way to have image gallery by category, displayed where you want, <strong>without to deal with articles and/or article images</strong>.
Just organize your images in category (even nested, for which you may find useful the <a href="http://forum.textpattern.com/viewtopic.php?id=14987">bos_if_cat_parent</a> plugin,
build together to this one).</p>

<p><strong>Note:</strong>You may also use the &lt;bos_image_display /&gt; tag <strong>as a standalone tag to display images</strong> from a specified category by random/by first in cat/by id, everywhere you want(i.e. in your home page) without the gallery index.</p>
<p>Basically this is a replacement of original image_index and image_display couple of tag, or as a single tag to list
images from a certain category with some facilities like the capability
of having title (name) and caption of images displayed. Some feature are:</p>
<ul>
<li>Title (name) and caption of images can be displayed with the image</li>
<li>The index/list of images can be done with thumbnail or title, in custom markup</li>
<li>Sort by name or date of image, both asc or desc</li>
<li>To set an image to be displayed by default, when your first arrive on the gallery</li>
<li>To navigate with previous/next link near the image</li>
<li>To create a navigation bar with a number for every image (in addition to the normal thumbnail or title index)</li>
<li>Automatically create a class="here" attribute for the link of the photo in the index list you're actually viewing, so that you can style (border or background) to have a visual clue of the navigation</li>
<li>A tag to create introductory pages displaying a 1-photo preview of your subcategory images if you want to use subcategory.</li>
</ul>

<p>You won't find any pop-up or javascript, anyway. This is done to be a basic and accessible gallery,
yet with a number of useful feature. If you want popup or js, there already are a lot of useful plugins.</p>

<h2 id="tags">Tags</h2>
<p>Adds 6 tags:</p>
<ol><li><a href="#bos_image_display">&lt;txp:bos_image_display /&gt;</a></li>
<li><a href="#bos_image_index">&lt;txp:bos_image_index /&gt;</a></li>
<li><a href="#bos_image_category">&lt;txp:bos_image_category /&gt;</a></li>
<li><a href="#bos_imgnext">&lt;txp:bos_imgnext /&gt;</a></li>
<li><a href="#bos_imgprev">&lt;txp:bos_imgprev /&gt;</a></li>
<li><a href="#bos_subcat_image_index">&lt;txp:bos_subcat_image_index /&gt;</a></li></ol>

<h3 id="bos_image_display">&lt;txp:bos_image_display /&gt;</h3>
<p>This is a simple replacement for the negleted &lt;txp:image_display&gt;, tag that you can
use with &lt;txp:image_index&gt; to define simple but nice image galleries based on image categories.

&lt;txp:bos_image_display&gt; tag adds the ability to have the caption of the image displayed under the photo.</p>
<p>You can now also use the tag as a standalone tag for displaying one random images froma a specified category , or the image by id of by first in category</p>
Just use the attributes below:</p>

<dl>

<dt>capt</dt>
<dd>Set to non empty (i.e., '1') if you want the caption added to the bottom of image. Default empty (caption not displayed).</dd>


<dt>capt_label</dt>
<dd>Use it to define a text that can be added before the caption. I.e.: capt_label="&lt;strong&gt;Note :&lt;/strong&gt;" will result in a text like this:<br />
'<strong>Note:</strong> this is a photo-caption...'<dd>

<dt>capt_class</dt>
<dd>A class to be added to the wrap_capt tag for better styling. Default ="dida". If you don't want any class use capt_class_on="0" attribute.<dd>

<dt>capt_class_on</dt>
<dd>If you don't want any class on the wrap_capt tag, set it to "0". Default = "1".</dd>

<dt>wrap_capt</dt>
<dd>The tag you want your caption wrapped in. Default="p".</dd>

<dt>title</dt>
<dd>If you want to display the title (name) of your image on the top, set title="1"; default is 0.</dd>

<dt>title_tag</dt>
<dd>The tag you want your image title (name) wrapped in. Default="h3".</dd>

<dt>title_class</dt>
<dd>A class to be added to the title_capt tag for better styling. Default ="img_title". If you don't want any class use title_class_on="0" attribute.<dd>

<dt>title_class_on</dt>
<dd>If you don't want any class on the title_tag tag, set it to "0". Default = "1".</dd>

<dt>strip</dt>
<dd>If you want to use a numeric prefix in your images' name to better decide the sort order by name, but don't want that prefix be displayed,
you can specify a certain amount of charachters to be stripped from the title. Use the same number of chars in every title. Es. if you premit '100. this is the name'
you should specify strip="5" (3 number, 1 point and 1 space). Default empty.</dd>

<dt>wrap</dt>
<dd><del>A wraptag for the whole image+title+caption block.</del><ins>This is the container for the image alone. Class="img" added to the tag for styling.</ins></dd>

<dt>default</dt>
<dd>You can specify an <em>image id</em> <strong>or</strong> the following <em>keywords:</em><ol><li><em>'first'</em> for the first image in category according to sortby and
sortdir attributes. This is the default, so that in the home of the gallery the first image is displayed, even if you don't pick any image from the index.</li>
<li><em>'random'</em> will display one random image from the cat specified (needed if you're on a page
without a set category) everywhere in your site.</li></ol></dd>

<dt>cat</dt><dd>If you use default="first" in a page that has no category set, you need to define the category from which
 you want your first image be picked from. No need of this if you have your images in subcategories and use the bos_subcat_image_index tag or. It depends on your configuration. If you have
 only one category and only one gallery, and don't want to deal with conditionals, you need to set this. Default empty.</dd>

<dt>sortby</dt>
<dd>In the case you modify the default sorting for your bos_image_index, you may want to modify accordingly also this
attribute if you use default="first" and actually want to display the first image of your index.
Allowed values are only 'name' and 'date'. Default: date.</dd>

<dt>sortdir</dt>
<dd>Use as with sortby, if it applies. Values: 'asc' and 'desc'. Default: desc.</dd>

<dt>textilize <span style="color: red">(new!)</span></dt>
<dd>If you want your caption textilized set this to 1. Be aware not to use wrap_capt ="p", because it will end in nester paragraph. Use wrap_capt="div" instead. Default="0".</dd>

<dt>art_img <span style="color: red">(new!)</span></dt>
<dd>If set to 1, you can use the bos_image_display tag in article form to display article image. This can be handy if you want the capabilities of this tag (title, caption, textilized caption) for article images.
If no article image is set nothing will be returned. Please note that this attribute is set to be used <strong>only in article form!</strong>. Default ="0". </dd>

<dt>link_to <span style="color: red">(new!)</span></dt>
<dd>You can set a url to which the image will link to. Useful if you put a bos_image_display in home page and want that image to put you to a gallery section. Default empty. Example: link_to="http://www.yoursite.com/gallery".</dd>

<dt>link_title <span style="color: red">(new!)</span></dt>
<dd>You may set the content of the title attribute (if you need one) that will be nested in the a tag if you use the link_to attribute. Default empty.</dd>

</dl>


<h3 id="bos_image_index">&lt;txp:bos_image_index /&gt;</h3>
<p>You can use as a replacement of txp:image_index tag with bos_image_display, or
you can use it alone to list the images from the category. it adds a class="here" to the link of the photo in the index you're actually viewing.</p>

<p>All usual txp:image_index attributes are available, except of 'c' (now is 'cat'). The new attributes are:</p>
<dl><dt>thumb</dt><dd>If you want your fullsize image instead of your thumbnail displayed, set it to thumb="0"; default to 1.</dd>

<dt>image</dt>
<dd>if image is set to 0, then no image will be displayed and thumb attribute has no effect. Default: 1</dd>

<dt>cat</dt><dd>The category you may want to override. Do not use if possible.</dd>

<dt>link</dt><dd>If you want your image not linked, set link="0"; default to 1. This is useful if you don't want to use the tag
in association with a image_display tag. In that case, there's no point to have the link!</dd>

<dt>title</dt><dd>If you want to display the title (name) of your image on the top, set title="1"; default is 0.</dd>

<dt>title_tag</dt>
<dd>The tag you want your image title (name) wrapped in. Default="h3".</dd>

<dt>strip</dt>
<dd>If you want to use a numeric prefix in your images' name to better decide the sort order by name, but don't want that prefix be displayed,
you can specify a certain amount of charachters to be stripped from the title. Use the same number of chars in every title. Es. if you premit '100. this is the name'
you should specify strip="5" (3 number, 1 point and 1 space). Default empty.</dd>

<dt>capt</dt>
<dd>Set to non empty (i.e., '1') if you want the caption added to the bottom of image. Default empty (caption not displayed).</dd>


<dt>capt_label</dt>
<dd>Use it to define a text that can be added before the caption. I.e.: capt_label="&lt;strong&gt;Note :&lt;/strong&gt;" will result in a text like this:<br />
'<strong>Note:</strong> this is a photo-caption...'<dd>

<dt>wrap_capt</dt>
<dd>The tag you want your caption wrapped in. Default="p".</dd>

<dt>sortby</dt>
<dd>You can sort your category images by date (default) or by name.</dd>

<dt>sortdir</dt>
<dd>sortdir are desc (default) or asc.</dd>

<dt>limit</dt>
<dd>You can limit the number of image displayed in your index by setting this attribute.</dd>

<dt>offset</dt>
<dd>You can offset a certain number of images to be displayed in your index (i.e, if you want to skip the first image that you use as a cover and don't want to display in index). The images are offset in sortby and sortdir order.</dd>

<dt>counter</dt>
<dd>You want the index with a progressive number? Use counter="1". The number will be added inside the title tag (default = "h3"). Change as needed.
With this option you can create a numeric navigation for your gallery, instead of a title/thumbnail one. Yoy can also have 2 different nav in page: one with thumbnails or title
, and one below the main photo with the number. Just use two different instances of this tag in two different places.</dd>

<dt>counter_sep</dt>
<dd>Eventually you may want to separate the numeric index with some chars (i.e. counter_sep=" - " or counter_sep=" | ").</dd>

<dt>url_ext</dt>
<dd>The string you use here is added to the url generated, to link to a specific point of the page.
You have to premit the hash (#). The string is lowered. Default empty. Example: url_ext="#images"<dd>

<dt>textilize <span style="color: red">(new!)</span></dt>
<dd>Set to 1 to have the caption textilized. Default=0. Only works if capt is on. Remember to set the wrap_capt attribute to "div" if you don't want to textilize your caption, because the default p is invalid if another p is nested.<dd>

<dt>to_section</dt>
<dd>You can set a section different from the actual one to point the thumbs.
Suppose you want to display 9 thumbs in home page
to point to the full image in the 'gallery' section.
Just put this tag with to_section="gallery" in the default template.
Default empty.</dd>
<dt>in_article <span style="color: red">(new!)</span></dt>
<dd>Now you can have galleries into articles. If you do, use the new 'in_article="1"' attribute, to let know the plugi to calculate the url according. Obviously you need also to specify a cat for the gallery. This way you may have galleries into article without to use article images. Don't use this attribute outside the article (i.e., don't use it in page template!).</dd>
</dl>
<p><strong>Note:</strong>An attribute class="here" is automatically added to the &lt;a&gt; tag of the image when you're viewing that image. In this way you can style (with a border or a background) the image you're viewing in the thumb list.</p>

<h3 id="bos_image_category">&lt;txp:bos_image_category /&gt;</h3>

<p>Use the same attributes of original txp:category txp tag: link, title, name, wraptag and section.
The only difference is that title works.
Note that this will hopefully become obsolete in future version, when the fetch original function will be modified as it seems obvious. For the moment you can use this tag.</p>

<h3 id="bos_imgnext">&lt;txp:bos_imgnext /&gt;</h3>
<p>This wrapper tag create a link to the next image in category, according to one of the 2 sort mode available: Posted or Name (default). Use the attribute accordingly to the sort mode used in
the bos_image_index tag, otherwise there will be incoherence in the two way of navigate throu the gallery.</p>

<dl><dt>wraptag</dt><dd>You can specify a wrapper tag for the link. It won't be displayed when the tag is empty. No default (just the a tag as default).</dd>
<dt>sortby</dt><dd>Two possible values: date (default) or name. Use accordingly to the sortby option you use in the bos_image_index tag.</dd>
<dt>sortdir</dt><dd>'asc' or 'desc'. Default asc.</dd>
<dt>class</dt><dd>Default: bos_imgnext</dd>
<dt>cat</dt><dd>You may need to override the cat for prev/next.</dd>
<dt>default</dt><dd>If you choose a cover image by id for when you first arrive in the gallery in the image_display tag, you should specify here the id or the keyword 'first', so that also the prev/next will be correct in that case.</dd>

</dl>

<h3 id="bos_imgprev">&lt;txp:bos_imgprev /&gt;</h3>
<p>This wrapper tag create a link to the previous image in category, according to one of the 2 sort mode available: Posted or Name (default). Use the attribute accordingly to the sort mode used in
the bos_image_index tag, otherwise there will be incoherence in the two way of navigate throu the gallery.</p>

<dl><dt>wraptag</dt><dd>You can specify a wrapper tag for the link. It won't be displayed when the tag is empty. No default (just the a tag as default).</dd>
<dt>sortby</dt><dd>Two possible values: date (default) or name. Use accordingly to the sortby option you use in the bos_image_index tag.</dd>
<dt>sortdir</dt><dd>'asc' or 'desc'. Default desc.</dd>
<dt>class</dt><dd>Default: bos_imgprev</dd>
<dt>cat</dt><dd>You may need to override the cat for prev/next.</dd>
<dt>default</dt><dd>If you choose a cover image by id or by first, for when you first arrive in the gallery in the image_display tag, you should specify here the id or the keyword 'first', so that also the prev/next will be correct in that case.</dd>
</dl>


<h3 id="bos_subcat_image_index">&lt;txp:bos_subcat_image_index /&gt;</h3>
<p>This is a tag that let you display one or more images from all your subcategory.
Useful if you organize the images in subcategories, and want the parent cat page display a preview or an
index of the galleries available.</p>

<dl>
<dt>title_tag</dt><dd>The tag you want the subcategroy/subgallery wrapped in. Default 'h3'</dd>
<dt>title</dt><dd>If you want the title of the subcategory displayed leave to 1 (default), else set to 0.</dd>
<dt>link</dt><dd>You want the title of the subgallery linked to the subgallery. Default: 1.</dd>
<dt>break</dt><dd>Break tag for the list of subgalleries AND for the contained block(s) of preview. Default: li</dd>
<dt>wraptag</dt><dd>Wraptag for the list of subgalleries AND for the contained block(s) of preview. Default: ul</dd>
<dt>limit</dt><dd>The number of images to display for every subgallery. Default: 1.</dd>
<dt>sortby</dt><dd>The sort criterion you want to display the photos inside the subgalleries. The first image(s) to display in the index page will be chosen accordingly. Default 'date'.</dd>
<dt>sortdir</dt><dd>The sortdir to use with the sortby attribute. Default 'desc'.</dd>
<dt>container</dt><dd>The tag you want to wrap all the subgalleries index in. Default: div</dd>
<dt>class</dt><dd>The class you want to add to the container tag. Default: 'bos_subcat_image_index'</dd>
<dt>cat</dt><dd>If you want to use this in a section list page you need to specify the category from where to list the children. If you do this, put in
a if_not_category conditional (supplied with bos_if_cat_parent plugin) to not show when you go in category pages.</dd>
<dt>allchildren <span style="color: red">New v.0.43</span></dt><dd>If set to 1 it allows for all sub-subcategory listing. If empty (default) only first level children of cat will be displayed.</dd>
<dt>to_section<span style="color: red">New v.0.44</span></dt><dd>Use if you want the images and title link to a different section. Default empty. </dd>
<dt>link_to_image<span style="color: red">New v.0.44</span></dt><dd>If you want the image link to the category <strong>without</strong> an image selected, put it to 0. Else 1 (default).</dd>
</dl>

<h2 id="usage">Usage Example</h2>
<ol>
<li>
<p>If you want to set a simple gallery from images with category = 'holiday', with title (name) and caption on the selected photo, but not on the thumbnail list,
then use this:</p>
<div class="codice">
<code>
<p>&lt;div class="images"&gt;<br/>
&lt;txp:bos_image_display title="1" capt="1" /&gt;<br/>
&lt;txp:bos_image_index break="li" wraptag="ul" cat="holiday" /&gt;<br/>
&lt;/div&gt;</p>
</code>
</div>
<p>By default the first image is displayed at full size. You can click on the thumbnails to have the other fullsize image displayed.</p>
</li>
<li>
<p>If you just want to display all images from one category (i.e. holiday) with title and caption, but without a link, contained in a div, then use this:</p>
<div class="codice">
<code>
<p>&lt;div class="images"&gt;<br/>
&lt;txp:bos_image_index title="1" link="0" thumb="0" break="div" capt="1" cat="holidays" /&gt;<br/>
&lt;/div&gt;</p>
</code>
</div>
</li>
<li>
<p>Do you want to have a section with all the galleries by img categories?
 Just do this in the page template for the section "photo" (I use <a href="http://textpattern.org/plugins/126/stwcategorytree">stw_category_tree</a> plugin for generating the cat menu for images):</p>
<div class="codice">
<p>&lt;p class="path"&gt;You are here: &lt;a href="../"&gt;home&lt;/a&gt; &amp;gt; &lt;txp:bos_image_category link="1" title="1"/&gt;&lt;/p&gt;<br />
&lt;div class="gall"&gt;<br />
&lt;txp:bos_image_display capt="1" wrap_capt="div" capt_label="Note:"/&gt;<br />
&lt;/div&gt;<br />
&lt;txp:bos_image_index wraptag="ul" break="li"/&gt;<br />
&lt;div id="nav"&gt;<br />
&lt;txp:stw_category_tree section="photo" type="image" cssid="cat" onclass="active" /&gt;<br />&lt;/div&gt;</p>
</div>
</li>
<li><p>If you want one image from category="oddities" displayed randomly with title on your home page, simply put this where you want the image:</p>
<div class="codice">
<p>&lt;txp:bos_image_display cat="oddities" default="random" title="1" /&gt;</p>
</div>
</ol>
<p>(More to add, check again...)</p>
</div>";s:4:"code";s:14115:"	function bos_image_display($atts)
	{
		if (is_array($atts)) extract($atts);
		extract(lAtts(array(
			'capt_label'    => '',
			'wrap_capt'  => 'p',
			'capt_class' => 'dida',
			'capt_class_on' => 1,
			'capt' => '',
			'title' => '',
			'title_tag' => 'h3',
			'title_class' => 'img_title',
			'title_class_on' => 1,
			'wrap' => '',
			'default' => 'first',
			'sortby' => 'date',
			'sortdir' => 'desc',
			'strip' => '',
			'cat' => '',
			'textilize' => 0,
			'art_img' => 0,
                        'link_to' => '',
                        'link_title' => '',
		),$atts));
		global $s,$c,$p,$img_dir; $nm= ''; if($c) {$cat = $c;} else {if(!$cat) { $cat = 'root';}}
                if (!empty($link_title)) {$link_title = ' title="'.$link_title.'"';}
                if (!empty($link_to))
                {$urlto = '<a href="'.$link_to.'"'.$link_title.'>'; $closeurl = '</a>';}
                else
                {$urlto=''; $closeurl ='';}
		if ($art_img == 1) {global $thisarticle;$article_image = $thisarticle['article_image'];
		if (empty($article_image)) {return '';} else {$default= $article_image;}
		}
                if ((!$p) & (!empty($default))) {
                         if ($default == 'first') {$rs = safe_row("*", "txp_image", "category='$cat' order by $sortby $sortdir limit 1"); extract($rs);$p = $id;}
                          else if ($default == 'random') {$rs = safe_row("*", "txp_image", "category='$cat' order by rand() limit 1"); extract($rs);$p = $id;} else {$p = $default;}}
		if($p) {
			$rs = safe_row("*", "txp_image", "id='$p' limit 1");
			if ($rs) {
				extract($rs);
				$impath = hu.$img_dir.'/'.$id.$ext;
                                if ((!empty($capt)) & (!empty($caption))) {
                                if ($capt_class_on == 1) {$capt_class = ' class="'.$capt_class.'"';} else {$capt_class = '';}
                                if ($textilize == 1) {
                                include_once txpath.'/lib/classTextile.php'; $textileThis = new Textile();
                                 $caption = dumbDown($textileThis->TextileThis($caption));
                                }
                                $capt = '<'.$wrap_capt.$capt_class.'>'.$capt_label.$caption.'</'.$wrap_capt.'>';
                                }
                                if ((!empty($title)) & (!empty($name))) {
                                if ($title_class_on == 1) {$title_class = ' class="'.$title_class.'"';} else {$title_class = '';}
                                if ($strip) { $name = substr($name, $strip);}
                                $nm= '<'.$title_tag.$title_class.'>'.$name.'</'.$title_tag.'>';
                                }
                                if ($capt == 1) {$capt = '';}
                                if (empty($wrap)) {
				return $nm.$urlto.'<img src="'.$impath.
					'" style="height:'.$h.'px;width:'.$w.'px" alt="'.$alt.'" />'.$closeurl.$capt;}
                                else {return $nm.'<'.$wrap.' class="img">'.$urlto.'<img src="'.$impath.
					'" style="height:'.$h.'px;width:'.$w.'px" alt="'.$alt.'" />'.$closeurl.'</'.$wrap.'>'.$capt;}
			}
		}
	}

	function bos_fetch_category_title($name, $type)
	{
		static $cattitles = array();

		if (isset($cattitles[$type][$name]))
			return $cattitles[$type][$name];

		$f = safe_field('title','txp_category',"name='".doSlash($name)."' and type='".doSlash($type)."'");
		$cattitles[$type][$name] = $f;
		return $f;
	}

	function bos_image_category($atts)
	{
		global $pretext;
		extract(lAtts(array(
			'link' => 0,
			'title' => 0,
			'name' => '',
			'wraptag' => '',
			'section' => @$pretext['s'],
			'to_section' => '',
		),$atts));

		if ($name) $cat = $name;
		else $cat = @$pretext['c'];


		if ($cat) {
			$cat_title = ($title ? bos_fetch_category_title($cat, $type='image') : $cat);
			if ($link)
                                { if (!empty($to_section)) {$out = '<a href="'.pagelinkurl(array('c'=>$cat, 's'=>$to_section)).'">'.
					$cat_title.'</a>';} else {
				$out = '<a href="'.pagelinkurl(array('c'=>$cat, 's'=>$section)).'">'.
					$cat_title.'</a>';}}
			else
				{$out = $cat_title;}

			return doTag($out, $wraptag);
		}
	}

	function bos_image_index($atts)
	{
		global $permlink_mode,$s,$c,$p,$txpcfg,$img_dir,$path_to_site,$thisarticle;
		extract(lAtts(array(
			'label'    => '',
			'break'    => br,
			'wraptag'  => '',
			'parent'   => '',
            'limit' => '',
            'offset' => '',
            'thumb'  => 1,
            'link' => 1,
            'image' => 1,
            'title' => '',
            'counter' => '',
            'counter_sep' => '',
            'title_tag' => 'h3',
			'capt_label'    => '',
			'wrap_capt'  => 'p',
            'capt' => '',
			'type'    => 'article',
            'sortby' => 'date',
            'sortdir' => 'desc',
			'class'    => __FUNCTION__,
			'labeltag' => '',
			'strip' => '',
			'cat' => '',
			'url_ext' => '',
			'textilize' => 0,
			'to_section' => '',
			'in_article' => '',
			'link_to_image' => 1,
		),$atts));
                if (!$cat) {$cat = $c;}
                $capt_original = $capt;
		$cat = doSlash($cat); $nm = ''; $offset = (!empty($offset)) ? $offset.',' : '';
                $limit = (!empty($limit)) ? $offset.$limit : $offset.'9999';
		$rs = safe_rows_start("*", "txp_image","category='$cat' and thumbnail=1 order by '$sortby' $sortdir limit $limit");
                if ($thumb == 1) {$th = 't';} else {$th= '';}
		if ($rs) {
			$out = array();
			while ($a = nextRow($rs)) {
				extract($a);
                                $here = ($p == $id) ? ' class="here"' : '';
				$impath = $img_dir.'/'.$id.$th.$ext;
                                if ((!empty($capt)) & (!empty($caption))) {
                                if ($textilize == 1) {
                                include_once txpath.'/lib/classTextile.php'; $textileThis = new Textile();
                                 $caption = dumbDown($textileThis->TextileThis($caption));
                                }
                                $capt = '<'.$wrap_capt.'>'.$capt_label.$caption.'</'.$wrap_capt.'>';unset($caption);
                                }
				$imginfo = getimagesize($path_to_site.'/'.$impath);
				$dims = (!empty($imginfo[3])) ? ' '.$imginfo[3] : '';
                                if (!empty($in_article)) {$url =  permlinkurl($thisarticle).'/?p='.$id;} else {
                                if (!empty($to_section))
                                {if ($link_to_image == 1) {$url = pagelinkurl(array('c'=>$cat, 's'=>$to_section, 'p'=>$id));} else {$url = pagelinkurl(array('c'=>$cat, 's'=>$to_section));}}
                                else  { if ($link_to_image == 1) {$url = pagelinkurl(array('c'=>$cat, 's'=>$s, 'p'=>$id));} else {$url = pagelinkurl(array('c'=>$cat, 's'=>$s));}}}
                                $img = '<img src="'.hu.$impath.'"'.$dims.' alt="'.$alt.'" />';

                                if ($link == 1) {$linktag =  '<a'.$here.' href="'.$url.strtolower($url_ext).'">';}
                                else {$linktag = '<a'.$here.'>';}
                                if ($title) {if ($strip) {$name = substr($name, $strip);}
                                $nm = '<'.$title_tag.'>'.$linktag.$counter.$counter_sep.$name.'</a>'.'</'.$title_tag.'>';}

                                else {

                                 if ($counter) { $nm = $linktag.$counter.$counter_sep.'</a>';} else { $nm = '';}

                                $counter = (!empty($counter) ? ($counter + 1) : '');}
                                if ($capt == 1) {$capt = '';}
                                if (!$image) {$out[] = $nm.$capt;$capt = $capt_original;}

                                else { $out[] = $nm.$linktag.$img.'</a>'.$capt;$capt = $capt_original;}
			}
			if (count($out)) {
				return doLabel($label, $labeltag).doWrap($out, $wraptag, $break, $class);
			}
		}
		return '';
	}


function bos_imgnext($atts, $enclosed) {

	global $c,$p,$pfr,$img_dir;

	extract(lAtts(array(
			'wraptag'  => '',
			'class'    => __FUNCTION__,
			'default' => '',
                        'sortby' => 'date',
                        'sortdir' => 'desc',
                        'cat' => '',
		),$atts));
		  // adjusting cat without override global $c
		   if(!$cat) {$cat = $c;}
          // get the actual parameters
          if($p) {$pag = $p;$rs = safe_row("*", "txp_image", "category='$cat' and id = $pag order by '$sortby' $sortdir limit 1"); extract($rs); } else if ((!empty($default)) && ($default == 'first')) { $rs = safe_row("*", "txp_image", "category='$cat' order by '$sortby' $sortdir limit 1"); extract($rs); $pag = $id; $nam = $name;} else {$pag = $default;$rs = safe_row("*", "txp_image", "category='$cat' and id = $pag order by '$sortby' $sortdir limit 1"); extract($rs); }

          // 4 cases for the sorting order...
if ($sortby == 'date') {

          if ($sortdir == 'asc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id > $pag and thumbnail = 1 order by '$sortby' asc limit 1"); extract($rs); if ($oldid == $id) {$id='';}}

          if ($sortdir == 'desc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id < $pag and thumbnail = 1 order by '$sortby' desc limit 1"); extract($rs);  if ($oldid == $id) {$id='';}
                                           }
                                }

if ($sortby == 'name') {

          if ($sortdir == 'asc') { $oldid = $id;
          $gs = safe_row("*", "txp_image", "category='$cat' and id != $pag and name > '$name' and thumbnail = 1 order by name asc limit 2"); extract($gs); if ($oldid == $id) {$id='';}}

          if ($sortdir == 'desc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id != $pag and name < '$name' and thumbnail = 1 order by name desc limit 1"); extract($rs);  if ($oldid == $id) {$id='';}}

                                  }

 if (($cat) && (!empty($id))) {

               $impath="<a href=\"?c=".$cat."&amp;p=".$id."\">".$enclosed."</a>";
               if (!empty($wraptag)) {return(doTag($impath,$wraptag,$class));} else {return $impath;}
	}
}
function bos_imgprev($atts, $enclosed){
	global $c,$p,$pfr,$img_dir;

extract(lAtts(array(
			'wraptag'  => '',
			'sortby' => 'date',
                        'sortdir' => 'desc',
			'class'    => __FUNCTION__,
			'default' => '',
			'cat' => '',
		),$atts));
		 if(!$cat) {$cat = $c;}
          if($p) {$pag = $p;$rs = safe_row("*", "txp_image", "category='$cat' and id = $pag order by '$sortby' $sortdir limit 1"); extract($rs); } else if ((!empty($default)) && ($default == 'first')) { $rs = safe_row("*", "txp_image", "category='$cat' order by '$sortby' $sortdir limit 1"); extract($rs); $pag = $id;} else {$pag = $default;$rs = safe_row("*", "txp_image", "category='$cat' and id = $pag order by '$sortby' $sortdir limit 1"); extract($rs); }

          // 4 cases for the sorting order...
if ($sortby == 'date') {

          if ($sortdir == 'asc') {  $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id < $pag and thumbnail = 1 order by '$sortby' desc limit 1"); extract($rs); if ($oldid == $id) {$id='';};
                                         }
          if ($sortdir == 'desc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id > $pag and thumbnail = 1 order by '$sortby' asc limit 1"); extract($rs);  if ($oldid == $id) {$id='';}}

                           }


if ($sortby == 'name') {

          if ($sortdir == 'desc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id != $pag and name > '$name' and thumbnail = 1 order by name asc limit 2"); extract($rs);  if ($oldid == $id){$id='';}}

          if ($sortdir == 'asc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id != $pag and name < '$name' and thumbnail = 1 order by name desc limit 1"); extract($rs); if ($oldid == $id){$id='';}}

                                  }

 if (($cat) && (!empty($id))) {

               $impath="<a href=\"?c=".$cat."&amp;p=".$id."\">".$enclosed."</a>";
               if (!empty($wraptag)) {return(doTag($impath,$wraptag,$class));} else {return $impath;}
	}
}

function bos_subcat_image_index($atts) {
		if (is_array($atts)) extract($atts);
		extract(lAtts(array(
                          'title_tag' => 'h3',
                          'title' => '1',
                          'link' => '1',
                          'break' => 'li',
                          'wraptag' => 'ul',
                          'limit' => '1',
                          'sortby' => 'date',
                          'sortdir' => 'desc',
                          'container' => 'div',
                          'cat' => '',
                          'allchildren' => '',
			  			  'class'    => __FUNCTION__,
			  			  'link_to_image' => 1,
                          'to_section' => '',
		),$atts));


global $c; if(!$cat) {$cat = $c;}$oldcat = $cat;
$type='image';
			$qs = safe_row("lft,rgt",'txp_category',"name='$cat' and type='$type'");
			if($qs) {
				extract($qs);
				$rs = safe_rows_start(
				  "name,title,parent",
				  "txp_category","name != 'default' and type='$type' and (lft between $lft and $rgt) order by lft asc"
				);
}

if ($rs) {
			$out1 = array();
			while ($a = nextRow($rs)) {
				extract($a);
				if ($name=='root') continue;
                if (($allchildren == '') and ($parent != $cat)) continue;
				if($name != $cat) {
                                           $out1[] = "<".$title_tag.">".bos_image_category(array('name' => $name, 'to_section' => $to_section, 'title' => $title, 'link' => $link))."</".$title_tag.">".bos_image_index(array('cat' => $name, 'sortby' => $sortby, 'break' => $break, 'wraptag' => $wraptag, 'to_section' => $to_section, 'link_to_image' => $link_to_image, 'sortdir' => $sortdir, 'limit' => $limit));
                                         }
			}

		}
if (count($out1)) {return(doTag(doWrap($out1,$wraptag,$break),$container,$class));}
}
";s:12:"code_restore";s:14115:"	function bos_image_display($atts)
	{
		if (is_array($atts)) extract($atts);
		extract(lAtts(array(
			'capt_label'    => '',
			'wrap_capt'  => 'p',
			'capt_class' => 'dida',
			'capt_class_on' => 1,
			'capt' => '',
			'title' => '',
			'title_tag' => 'h3',
			'title_class' => 'img_title',
			'title_class_on' => 1,
			'wrap' => '',
			'default' => 'first',
			'sortby' => 'date',
			'sortdir' => 'desc',
			'strip' => '',
			'cat' => '',
			'textilize' => 0,
			'art_img' => 0,
                        'link_to' => '',
                        'link_title' => '',
		),$atts));
		global $s,$c,$p,$img_dir; $nm= ''; if($c) {$cat = $c;} else {if(!$cat) { $cat = 'root';}}
                if (!empty($link_title)) {$link_title = ' title="'.$link_title.'"';}
                if (!empty($link_to))
                {$urlto = '<a href="'.$link_to.'"'.$link_title.'>'; $closeurl = '</a>';}
                else
                {$urlto=''; $closeurl ='';}
		if ($art_img == 1) {global $thisarticle;$article_image = $thisarticle['article_image'];
		if (empty($article_image)) {return '';} else {$default= $article_image;}
		}
                if ((!$p) & (!empty($default))) {
                         if ($default == 'first') {$rs = safe_row("*", "txp_image", "category='$cat' order by $sortby $sortdir limit 1"); extract($rs);$p = $id;}
                          else if ($default == 'random') {$rs = safe_row("*", "txp_image", "category='$cat' order by rand() limit 1"); extract($rs);$p = $id;} else {$p = $default;}}
		if($p) {
			$rs = safe_row("*", "txp_image", "id='$p' limit 1");
			if ($rs) {
				extract($rs);
				$impath = hu.$img_dir.'/'.$id.$ext;
                                if ((!empty($capt)) & (!empty($caption))) {
                                if ($capt_class_on == 1) {$capt_class = ' class="'.$capt_class.'"';} else {$capt_class = '';}
                                if ($textilize == 1) {
                                include_once txpath.'/lib/classTextile.php'; $textileThis = new Textile();
                                 $caption = dumbDown($textileThis->TextileThis($caption));
                                }
                                $capt = '<'.$wrap_capt.$capt_class.'>'.$capt_label.$caption.'</'.$wrap_capt.'>';
                                }
                                if ((!empty($title)) & (!empty($name))) {
                                if ($title_class_on == 1) {$title_class = ' class="'.$title_class.'"';} else {$title_class = '';}
                                if ($strip) { $name = substr($name, $strip);}
                                $nm= '<'.$title_tag.$title_class.'>'.$name.'</'.$title_tag.'>';
                                }
                                if ($capt == 1) {$capt = '';}
                                if (empty($wrap)) {
				return $nm.$urlto.'<img src="'.$impath.
					'" style="height:'.$h.'px;width:'.$w.'px" alt="'.$alt.'" />'.$closeurl.$capt;}
                                else {return $nm.'<'.$wrap.' class="img">'.$urlto.'<img src="'.$impath.
					'" style="height:'.$h.'px;width:'.$w.'px" alt="'.$alt.'" />'.$closeurl.'</'.$wrap.'>'.$capt;}
			}
		}
	}

	function bos_fetch_category_title($name, $type)
	{
		static $cattitles = array();

		if (isset($cattitles[$type][$name]))
			return $cattitles[$type][$name];

		$f = safe_field('title','txp_category',"name='".doSlash($name)."' and type='".doSlash($type)."'");
		$cattitles[$type][$name] = $f;
		return $f;
	}

	function bos_image_category($atts)
	{
		global $pretext;
		extract(lAtts(array(
			'link' => 0,
			'title' => 0,
			'name' => '',
			'wraptag' => '',
			'section' => @$pretext['s'],
			'to_section' => '',
		),$atts));

		if ($name) $cat = $name;
		else $cat = @$pretext['c'];


		if ($cat) {
			$cat_title = ($title ? bos_fetch_category_title($cat, $type='image') : $cat);
			if ($link)
                                { if (!empty($to_section)) {$out = '<a href="'.pagelinkurl(array('c'=>$cat, 's'=>$to_section)).'">'.
					$cat_title.'</a>';} else {
				$out = '<a href="'.pagelinkurl(array('c'=>$cat, 's'=>$section)).'">'.
					$cat_title.'</a>';}}
			else
				{$out = $cat_title;}

			return doTag($out, $wraptag);
		}
	}

	function bos_image_index($atts)
	{
		global $permlink_mode,$s,$c,$p,$txpcfg,$img_dir,$path_to_site,$thisarticle;
		extract(lAtts(array(
			'label'    => '',
			'break'    => br,
			'wraptag'  => '',
			'parent'   => '',
            'limit' => '',
            'offset' => '',
            'thumb'  => 1,
            'link' => 1,
            'image' => 1,
            'title' => '',
            'counter' => '',
            'counter_sep' => '',
            'title_tag' => 'h3',
			'capt_label'    => '',
			'wrap_capt'  => 'p',
            'capt' => '',
			'type'    => 'article',
            'sortby' => 'date',
            'sortdir' => 'desc',
			'class'    => __FUNCTION__,
			'labeltag' => '',
			'strip' => '',
			'cat' => '',
			'url_ext' => '',
			'textilize' => 0,
			'to_section' => '',
			'in_article' => '',
			'link_to_image' => 1,
		),$atts));
                if (!$cat) {$cat = $c;}
                $capt_original = $capt;
		$cat = doSlash($cat); $nm = ''; $offset = (!empty($offset)) ? $offset.',' : '';
                $limit = (!empty($limit)) ? $offset.$limit : $offset.'9999';
		$rs = safe_rows_start("*", "txp_image","category='$cat' and thumbnail=1 order by '$sortby' $sortdir limit $limit");
                if ($thumb == 1) {$th = 't';} else {$th= '';}
		if ($rs) {
			$out = array();
			while ($a = nextRow($rs)) {
				extract($a);
                                $here = ($p == $id) ? ' class="here"' : '';
				$impath = $img_dir.'/'.$id.$th.$ext;
                                if ((!empty($capt)) & (!empty($caption))) {
                                if ($textilize == 1) {
                                include_once txpath.'/lib/classTextile.php'; $textileThis = new Textile();
                                 $caption = dumbDown($textileThis->TextileThis($caption));
                                }
                                $capt = '<'.$wrap_capt.'>'.$capt_label.$caption.'</'.$wrap_capt.'>';unset($caption);
                                }
				$imginfo = getimagesize($path_to_site.'/'.$impath);
				$dims = (!empty($imginfo[3])) ? ' '.$imginfo[3] : '';
                                if (!empty($in_article)) {$url =  permlinkurl($thisarticle).'/?p='.$id;} else {
                                if (!empty($to_section))
                                {if ($link_to_image == 1) {$url = pagelinkurl(array('c'=>$cat, 's'=>$to_section, 'p'=>$id));} else {$url = pagelinkurl(array('c'=>$cat, 's'=>$to_section));}}
                                else  { if ($link_to_image == 1) {$url = pagelinkurl(array('c'=>$cat, 's'=>$s, 'p'=>$id));} else {$url = pagelinkurl(array('c'=>$cat, 's'=>$s));}}}
                                $img = '<img src="'.hu.$impath.'"'.$dims.' alt="'.$alt.'" />';

                                if ($link == 1) {$linktag =  '<a'.$here.' href="'.$url.strtolower($url_ext).'">';}
                                else {$linktag = '<a'.$here.'>';}
                                if ($title) {if ($strip) {$name = substr($name, $strip);}
                                $nm = '<'.$title_tag.'>'.$linktag.$counter.$counter_sep.$name.'</a>'.'</'.$title_tag.'>';}

                                else {

                                 if ($counter) { $nm = $linktag.$counter.$counter_sep.'</a>';} else { $nm = '';}

                                $counter = (!empty($counter) ? ($counter + 1) : '');}
                                if ($capt == 1) {$capt = '';}
                                if (!$image) {$out[] = $nm.$capt;$capt = $capt_original;}

                                else { $out[] = $nm.$linktag.$img.'</a>'.$capt;$capt = $capt_original;}
			}
			if (count($out)) {
				return doLabel($label, $labeltag).doWrap($out, $wraptag, $break, $class);
			}
		}
		return '';
	}


function bos_imgnext($atts, $enclosed) {

	global $c,$p,$pfr,$img_dir;

	extract(lAtts(array(
			'wraptag'  => '',
			'class'    => __FUNCTION__,
			'default' => '',
                        'sortby' => 'date',
                        'sortdir' => 'desc',
                        'cat' => '',
		),$atts));
		  // adjusting cat without override global $c
		   if(!$cat) {$cat = $c;}
          // get the actual parameters
          if($p) {$pag = $p;$rs = safe_row("*", "txp_image", "category='$cat' and id = $pag order by '$sortby' $sortdir limit 1"); extract($rs); } else if ((!empty($default)) && ($default == 'first')) { $rs = safe_row("*", "txp_image", "category='$cat' order by '$sortby' $sortdir limit 1"); extract($rs); $pag = $id; $nam = $name;} else {$pag = $default;$rs = safe_row("*", "txp_image", "category='$cat' and id = $pag order by '$sortby' $sortdir limit 1"); extract($rs); }

          // 4 cases for the sorting order...
if ($sortby == 'date') {

          if ($sortdir == 'asc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id > $pag and thumbnail = 1 order by '$sortby' asc limit 1"); extract($rs); if ($oldid == $id) {$id='';}}

          if ($sortdir == 'desc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id < $pag and thumbnail = 1 order by '$sortby' desc limit 1"); extract($rs);  if ($oldid == $id) {$id='';}
                                           }
                                }

if ($sortby == 'name') {

          if ($sortdir == 'asc') { $oldid = $id;
          $gs = safe_row("*", "txp_image", "category='$cat' and id != $pag and name > '$name' and thumbnail = 1 order by name asc limit 2"); extract($gs); if ($oldid == $id) {$id='';}}

          if ($sortdir == 'desc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id != $pag and name < '$name' and thumbnail = 1 order by name desc limit 1"); extract($rs);  if ($oldid == $id) {$id='';}}

                                  }

 if (($cat) && (!empty($id))) {

               $impath="<a href=\"?c=".$cat."&amp;p=".$id."\">".$enclosed."</a>";
               if (!empty($wraptag)) {return(doTag($impath,$wraptag,$class));} else {return $impath;}
	}
}
function bos_imgprev($atts, $enclosed){
	global $c,$p,$pfr,$img_dir;

extract(lAtts(array(
			'wraptag'  => '',
			'sortby' => 'date',
                        'sortdir' => 'desc',
			'class'    => __FUNCTION__,
			'default' => '',
			'cat' => '',
		),$atts));
		 if(!$cat) {$cat = $c;}
          if($p) {$pag = $p;$rs = safe_row("*", "txp_image", "category='$cat' and id = $pag order by '$sortby' $sortdir limit 1"); extract($rs); } else if ((!empty($default)) && ($default == 'first')) { $rs = safe_row("*", "txp_image", "category='$cat' order by '$sortby' $sortdir limit 1"); extract($rs); $pag = $id;} else {$pag = $default;$rs = safe_row("*", "txp_image", "category='$cat' and id = $pag order by '$sortby' $sortdir limit 1"); extract($rs); }

          // 4 cases for the sorting order...
if ($sortby == 'date') {

          if ($sortdir == 'asc') {  $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id < $pag and thumbnail = 1 order by '$sortby' desc limit 1"); extract($rs); if ($oldid == $id) {$id='';};
                                         }
          if ($sortdir == 'desc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id > $pag and thumbnail = 1 order by '$sortby' asc limit 1"); extract($rs);  if ($oldid == $id) {$id='';}}

                           }


if ($sortby == 'name') {

          if ($sortdir == 'desc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id != $pag and name > '$name' and thumbnail = 1 order by name asc limit 2"); extract($rs);  if ($oldid == $id){$id='';}}

          if ($sortdir == 'asc') { $oldid = $id;
          $rs = safe_row("*", "txp_image", "category='$cat' and id != $pag and name < '$name' and thumbnail = 1 order by name desc limit 1"); extract($rs); if ($oldid == $id){$id='';}}

                                  }

 if (($cat) && (!empty($id))) {

               $impath="<a href=\"?c=".$cat."&amp;p=".$id."\">".$enclosed."</a>";
               if (!empty($wraptag)) {return(doTag($impath,$wraptag,$class));} else {return $impath;}
	}
}

function bos_subcat_image_index($atts) {
		if (is_array($atts)) extract($atts);
		extract(lAtts(array(
                          'title_tag' => 'h3',
                          'title' => '1',
                          'link' => '1',
                          'break' => 'li',
                          'wraptag' => 'ul',
                          'limit' => '1',
                          'sortby' => 'date',
                          'sortdir' => 'desc',
                          'container' => 'div',
                          'cat' => '',
                          'allchildren' => '',
			  			  'class'    => __FUNCTION__,
			  			  'link_to_image' => 1,
                          'to_section' => '',
		),$atts));


global $c; if(!$cat) {$cat = $c;}$oldcat = $cat;
$type='image';
			$qs = safe_row("lft,rgt",'txp_category',"name='$cat' and type='$type'");
			if($qs) {
				extract($qs);
				$rs = safe_rows_start(
				  "name,title,parent",
				  "txp_category","name != 'default' and type='$type' and (lft between $lft and $rgt) order by lft asc"
				);
}

if ($rs) {
			$out1 = array();
			while ($a = nextRow($rs)) {
				extract($a);
				if ($name=='root') continue;
                if (($allchildren == '') and ($parent != $cat)) continue;
				if($name != $cat) {
                                           $out1[] = "<".$title_tag.">".bos_image_category(array('name' => $name, 'to_section' => $to_section, 'title' => $title, 'link' => $link))."</".$title_tag.">".bos_image_index(array('cat' => $name, 'sortby' => $sortby, 'break' => $break, 'wraptag' => $wraptag, 'to_section' => $to_section, 'link_to_image' => $link_to_image, 'sortdir' => $sortdir, 'limit' => $limit));
                                         }
			}

		}
if (count($out1)) {return(doTag(doWrap($out1,$wraptag,$break),$container,$class));}
}
";s:8:"code_md5";s:32:"79752bd44fb521c2327a8cc1faa37094";s:4:"type";s:1:"0";}