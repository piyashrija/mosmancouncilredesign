a:11:{s:4:"name";s:8:"wet_peex";s:6:"status";s:1:"1";s:6:"author";s:16:"Robert Wetzlmayr";s:10:"author_uri";s:73:"http://awasteofwords.com/article/wet_peex-peek-into-textpattern-using-xml";s:7:"version";s:3:"0.2";s:11:"description";s:31:"Peek into Textpattern using XML";s:4:"help";s:1860:"	<h3>Peek into Textpattern using <span class="caps">XML</span></h3>

	<p><strong>wet_peex</strong> peeks for Textpattern objects as <acronym title="Extensible Markup Language">XML</acronym> resources.</p>

	<h4>usage:</h4>

	<p><strong>wet_peex</strong> is a backend plugin without any user interface. It handles <span class="caps">HTTP</span> <span class="caps">GET</span> requests and replies with an <span class="caps">XML</span> response.</p>

	<p>To query <code>wet_peex</code>, send a request to the resource located at <code>http://yoursite.tld/textpattern?wet_peex</code>. wet_peex understands these query parameters:</p>

	<ul>
		<li><code>object_type</code>: <code>article</code>, <code>section</code>, <code>category</code>, <code>link</code>, <code>image</code>, <code>file</code>. NB: Use one of these as a value for the <code>wet_peex</code> <span class="caps"><span class="caps">GET</span></span> parameter, e.g. <code>http://yoursite.tld/textpattern?wet_peex=article</code></li>
		<li><code>sort</code>: Sort criterion</li>
		<li><code>dir</code>: Sort direction. Use either <code>asc</code> for ascending sort order, or <code>desc</code> for descending sort order</li>
		<li><code>search</code>: Textual search criterion</li>
		<li><code>offset</code>: First object&#8217;s ordinal in reply</li>
		<li><code>limit</code>: Maximum objects returned</li>
	</ul>

	<p>A sample request:</p>

	<p><code>http://yoursite.tld/textpattern?wet_peex=article&#38;sort=posted&#38;dir=asc</code></p>

	<p>The <span class="caps">XML</span> reply message is rather self explanatory. View source for details.<br />
NB: <code>article</code> is the only currently implemented object type.</p>

	<h4>Licence and Disclaimer</h4>

	<p>This plug-in is released under the <a href="http://www.gnu.org/licenses/gpl.txt" rel="nofollow">Gnu General Public Licence</a>.</p>";s:4:"code";s:3468:"
if (@txpinterface == 'admin') {
	$what = gps('wet_peex');
	if(in_array($what, array('article', 'section', 'category', 'link', 'image', 'file'))) {
		wet_peex($what);
		exit();
	} elseif(!empty($what)) {
		// curiosity killed the cat
		header('HTTP/1.1 400 Bad request');
		header('Status: 400 Bad request');
		exit();
	}
}

function wet_peex($what)
{
	// get and sanitize some common parameters
	extract(gpsa(array('limit', 'offset', 'sort', 'dir', 'crit', 'search')));

	$limit = intval(doSlash($limit));
	if (0 == $limit) {
		$limit = 20;
	}

	$offset = intval(doSlash($offset));

	if ($dir != 'desc') {
		$dir = 'asc';
	}

	// preludium
	while(@ob_end_clean()); // eat previous output to assert well-formed XML
	header('Content-Type: text/xml; charset=utf-8');
	header('Expires: '.date('r', time()+60)); // avoid too frequent updates
	header('Cache-Control: private');
	echo '<?xml version="1.0" encoding="utf-8" ?>'.n;
	echo '<textpattern>'.n;

	switch($what) {
		case 'article':
			if (empty($search)) {
				$search = '1=1';
			} else {
				$search_escaped = doSlash($search);
				$search = "Title rlike '$search_escaped' or Body rlike '$search_escaped'";
			}

			switch ($sort)
			{
				case 'id':
					$sort_sql = 'ID '.$dir;
				break;

				case 'posted':
					$sort_sql = 'Posted '.$dir;
				break;

				case 'lastmod':
					$sort_sql = 'LastMod '.$dir;
				break;

				case 'title':
					$sort_sql = 'Title '.$dir.', Posted desc';
				break;

				case 'section':
					$sort_sql = 'Section '.$dir.', Posted desc';
				break;

				case 'category1':
					$sort_sql = 'Category1 '.$dir.', Posted desc';
				break;

				case 'category2':
					$sort_sql = 'Category2 '.$dir.', Posted desc';
				break;

				case 'status':
					$sort_sql = 'Status '.$dir.', Posted desc';
				break;

				case 'author':
					$sort_sql = 'AuthorID '.$dir.', Posted desc';
				break;

				case 'comments':
					$sort_sql = 'comments_count '.$dir.', Posted desc';
				break;

				default:
					$sort_sql = 'Posted '.$dir;
				break;
			}

			$count = safe_count('textpattern', $search); // ignore article status
			$articles = safe_rows('*', 'textpattern', "$search order by $sort_sql limit $limit offset $offset");

			require_once txpath.'/publish/taghandlers.php';

			echo "<articles count='$count' offset='$offset' limit='$limit'>".n;
			foreach ($articles as $a) {
				$teaser = htmlspecialchars
							(preg_replace('/^(.{0,45}).*$/su','$1',
								trim(strip_tags($a['Body_html']))
							));
				echo '<article>'.n.
					'<id>'.$a['ID'].'</id>'.n.
					'<title>'.htmlspecialchars($a['Title']).'</title>'.n.
					'<section>'.htmlspecialchars($a['Section']).'</section>'.n;
					if(!empty($a['Category1']) || !empty($a['Category2'])) {
						echo '<categories>'.n.
							'<category level="1">'.htmlspecialchars($a['Category1']).'</category>'.n.
							'<category level="2">'.htmlspecialchars($a['Category2']).'</category>'.n.
						'</categories>'.n;
					}
					echo '<posted>'.$a['Posted'].'</posted>'.n.
					'<teaser>'.$teaser.'</teaser>'.n.
					'<lastmod>'.$a['LastMod'].'</lastmod>'.n.
					'<permlink>'.permlinkurl($a).'</permlink>'.n.
					'</article>'.n;
			}
			echo '</articles>';

			break; // $what == 'article'
		/**
		 * @todo Implement for other txp objects
		 */
		case 'section':
		case 'category':
		case 'image';
		case 'file';
			echo '<message>not implemented</message>';
			break;
		default:
			break;
	}

	// postludium
	echo n.'</textpattern>';

}
";s:12:"code_restore";s:3468:"
if (@txpinterface == 'admin') {
	$what = gps('wet_peex');
	if(in_array($what, array('article', 'section', 'category', 'link', 'image', 'file'))) {
		wet_peex($what);
		exit();
	} elseif(!empty($what)) {
		// curiosity killed the cat
		header('HTTP/1.1 400 Bad request');
		header('Status: 400 Bad request');
		exit();
	}
}

function wet_peex($what)
{
	// get and sanitize some common parameters
	extract(gpsa(array('limit', 'offset', 'sort', 'dir', 'crit', 'search')));

	$limit = intval(doSlash($limit));
	if (0 == $limit) {
		$limit = 20;
	}

	$offset = intval(doSlash($offset));

	if ($dir != 'desc') {
		$dir = 'asc';
	}

	// preludium
	while(@ob_end_clean()); // eat previous output to assert well-formed XML
	header('Content-Type: text/xml; charset=utf-8');
	header('Expires: '.date('r', time()+60)); // avoid too frequent updates
	header('Cache-Control: private');
	echo '<?xml version="1.0" encoding="utf-8" ?>'.n;
	echo '<textpattern>'.n;

	switch($what) {
		case 'article':
			if (empty($search)) {
				$search = '1=1';
			} else {
				$search_escaped = doSlash($search);
				$search = "Title rlike '$search_escaped' or Body rlike '$search_escaped'";
			}

			switch ($sort)
			{
				case 'id':
					$sort_sql = 'ID '.$dir;
				break;

				case 'posted':
					$sort_sql = 'Posted '.$dir;
				break;

				case 'lastmod':
					$sort_sql = 'LastMod '.$dir;
				break;

				case 'title':
					$sort_sql = 'Title '.$dir.', Posted desc';
				break;

				case 'section':
					$sort_sql = 'Section '.$dir.', Posted desc';
				break;

				case 'category1':
					$sort_sql = 'Category1 '.$dir.', Posted desc';
				break;

				case 'category2':
					$sort_sql = 'Category2 '.$dir.', Posted desc';
				break;

				case 'status':
					$sort_sql = 'Status '.$dir.', Posted desc';
				break;

				case 'author':
					$sort_sql = 'AuthorID '.$dir.', Posted desc';
				break;

				case 'comments':
					$sort_sql = 'comments_count '.$dir.', Posted desc';
				break;

				default:
					$sort_sql = 'Posted '.$dir;
				break;
			}

			$count = safe_count('textpattern', $search); // ignore article status
			$articles = safe_rows('*', 'textpattern', "$search order by $sort_sql limit $limit offset $offset");

			require_once txpath.'/publish/taghandlers.php';

			echo "<articles count='$count' offset='$offset' limit='$limit'>".n;
			foreach ($articles as $a) {
				$teaser = htmlspecialchars
							(preg_replace('/^(.{0,45}).*$/su','$1',
								trim(strip_tags($a['Body_html']))
							));
				echo '<article>'.n.
					'<id>'.$a['ID'].'</id>'.n.
					'<title>'.htmlspecialchars($a['Title']).'</title>'.n.
					'<section>'.htmlspecialchars($a['Section']).'</section>'.n;
					if(!empty($a['Category1']) || !empty($a['Category2'])) {
						echo '<categories>'.n.
							'<category level="1">'.htmlspecialchars($a['Category1']).'</category>'.n.
							'<category level="2">'.htmlspecialchars($a['Category2']).'</category>'.n.
						'</categories>'.n;
					}
					echo '<posted>'.$a['Posted'].'</posted>'.n.
					'<teaser>'.$teaser.'</teaser>'.n.
					'<lastmod>'.$a['LastMod'].'</lastmod>'.n.
					'<permlink>'.permlinkurl($a).'</permlink>'.n.
					'</article>'.n;
			}
			echo '</articles>';

			break; // $what == 'article'
		/**
		 * @todo Implement for other txp objects
		 */
		case 'section':
		case 'category':
		case 'image';
		case 'file';
			echo '<message>not implemented</message>';
			break;
		default:
			break;
	}

	// postludium
	echo n.'</textpattern>';

}
";s:8:"code_md5";s:32:"32c8c6b321c4be4e729e0a2660ea64a6";s:4:"type";s:1:"1";}