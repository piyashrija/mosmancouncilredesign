a:11:{s:4:"name";s:12:"zem_paginate";s:6:"status";s:1:"1";s:6:"author";s:11:"Alex Shiels";s:10:"author_uri";s:26:"http://thresholdstate.com/";s:7:"version";s:4:"0.11";s:11:"description";s:15:"Pagination tags";s:4:"help";s:42:"	<h1>Textile-formatted help goes here</h1>";s:4:"code";s:7277:"
define('zem_page_bignum', '999999999999');

// -------------------------------------------------------------

	function zem_next($atts, $thing, $self)
	{
		global $thispage, $zem_thispage_a, $pretext, $permlink_mode, $thisarticle;

		if (empty($pretext['secondpass'])) {
			if (!isset($thisarticle['is_first']))
				return $self;
			$atts['article_id'] = $thisarticle['thisid'];
			return zem_paginate_self(__FUNCTION__, $atts, $thing);
		}

		extract(lAtts(array(
			'showalways' => 0,
			'text' => $thing,
			'article_id' => '',
			'debug' => 0,
		), $atts));


		$pageinfo = zem_paginate_get($article_id);

		$numPages = $pageinfo['numPages'];
		$pg				= $pageinfo['pg'];

		if ($numPages > 1 and $pg > 1)
		{
			$nextpg = ($pg - 1 == 1) ? 0 : ($pg - 1);

			$url = zem_paginate_url($nextpg, $article_id);

			if ($text)
			{
				return '<a href="'.$url.'"'.
					(empty($title) ? '' : ' title="'.$title.'"').
					'>'.parse($text).'</a>';
			}

			return $url;
		}

		return ($showalways) ? parse($text) : '';
	}


// -------------------------------------------------------------

	function zem_prev($atts, $thing, $self)
	{
		global $thispage, $pretext, $permlink_mode, $thisarticle;

		if (empty($pretext['secondpass'])) {
			if (!isset($thisarticle['is_first']))
				return $self;
			$atts['article_id'] = $thisarticle['thisid'];
			return zem_paginate_self(__FUNCTION__, $atts, $thing);
		}

		extract(lAtts(array(
			'showalways' => 0,
			'text' => $thing,
			'article_id' => '',
			'debug' => 0,
		), $atts));

		$pageinfo = zem_paginate_get($article_id);

		$numPages = $pageinfo['numPages'];
		$pg				= $pageinfo['pg'];

		if ($numPages > 1 and $pg != $numPages)
		{
			$nextpg = $pg + 1;

			$url = zem_paginate_url($nextpg, $article_id);

			if ($text)
			{
				return '<a href="'.$url.'"'.
					(empty($title) ? '' : ' title="'.$title.'"').
					'>'.parse($text).'</a>';
			}

			return $url;
		}

		return ($showalways) ? parse($text) : '';
	}

// -------------------------------------------------------------

function zem_pages($atts, $thing, $self) {
	global $thispage, $pretext, $permlink_mode, $thisarticle;

	if (empty($pretext['secondpass'])) {
		if (!isset($thisarticle['is_first']))
			return $self;
		$atts['article_id'] = $thisarticle['thisid'];
		return zem_paginate_self(__FUNCTION__, $atts, $thing);
	}

	extract(lAtts(array(
		'max' => 10,
		'min' => 3,
		'class' => __FUNCTION__,
		'activeclass' => 'active',
		'wraptag' => 'span',
		'break' => sp,
		'ellipsis' => '&#8230;',
		'ends' => 0,
		'article_id' => '',
	), $atts));

	$max = max($max, 3);

	$pageinfo = zem_paginate_get($article_id);

	$numPages = $pageinfo['numPages'];
	$pg				= $pageinfo['pg'];

	$out = array();
	if ($numPages >= $min) {
		if (!$pg)
			$pg = 1;

		$from = 1;
		$to = $numPages;
		if ($numPages - $from >= $max) {
			$lft = max(1, $numPages - $max);
			$rgt = min($numPages, $max);

			$from = min($lft, max(1, $pg - floor($max/2)));
			$to = max($rgt, min($numPages, $pg + ceil($max/2) - 1));
		}

		if ($from > 1) {
			if ($ends)
				$out[] = '<a href="'.zem_paginate_url(1, $article_id).'">1</a>';
			if ($ellipsis)
				$out[] = $ellipsis;
		}

		for ($i = $from; $i <= $to; $i++) {
			$cl = ($pg == $i and $activeclass) ? ' class="'.$activeclass.'"' : '';
			$link = '<a href="'.zem_paginate_url($i, $article_id).'"'.$cl.'>'.$i.'</a>';
			$out[] = $link;
		}

		if ($to < $numPages) {
			if ($ellipsis)
				$out[] = $ellipsis;
			if ($ends)
				$out[] = '<a href="'.zem_paginate_url($numPages, $article_id).'">'.$numPages.'</a>';
		}

		return doWrap($out, $wraptag, $break, $class);
	}

}

// aliases for backwards compatibility
function zem_newer($atts, $thing, $self) {
	return zem_next($atts, $thing, $self);
}

function zem_older($atts, $thing, $self) {
	return zem_prev($atts, $thing, $self);
}

function zem_result_count($atts, $thing, $self) {
	global $thispage, $pretext, $permlink_mode;

	if (empty($pretext['secondpass']) and empty($thispage))
		return $self;

	extract(lAtts(array(
		'class' => __FUNCTION__,
		'wraptag' => 'span',
		'text' => '{total} items found',
		'text_single' => '{total} item found',
	), $atts));

	$total = @$thispage['grand_total'];

	$vars = array('{total}' => intval($total));

	if ($total == 1)
		$out = strtr($text_single, $vars);
	else
		$out = strtr($text, $vars);

	return doTag($out, $wraptag, $class);

}

function zem_paginate_self($tag, $atts, $thing) {
	$a = '';
	foreach ($atts as $k=>$v)
		$a .= ' '.$k.'="'.$v.'"';
	if ($thing)
		return '<txp:'.$tag.$a.'>'.$thing.'</txp:'.$tag.'>';
	return '<txp:'.$tag.$a.' />';
}

function zem_paginate_get($article_id=NULL) {
	if ($article_id) {
		global $zem_thispage_a;
		return @$zem_thispage_a[$article_id];
	}
	else {
		global $thispage;
		return $thispage;
	}
}

function zem_paginate_set($pageinfo) {
	global $thisarticle;

	if (isset($thisarticle['is_first'])) {
		$thisid = $thisarticle['thisid'];
		global $zem_thispage_a;
		if (empty($zem_thispage_a[$thisid]) or $zem_thispage_a[$thisid]['type'] != $pageinfo['type'])
			$zem_thispage_a[$thisid] = $pageinfo;
	}
	else {
		global $thispage;
		if (empty($thispage) or @$thispage['type'] != $pageinfo['type']) {
			$thispage = $pageinfo;
		}
	}
}

function zem_paginate_limit($lim, $grand_total, $offset=0, $pageby=0, $type='') {

	if (!$grand_total)
		return '';

	$limit = (intval($lim) ? intval($lim) : intval($grand_total));

    if (!$pageby)
	    $pageby = $limit;
    $pg = gps('pg');

    $total = $grand_total - $offset;
    $numPages = intval(ceil($total/$pageby));
    $pg = (!$pg) ? 1 : $pg;
    $pgoffset = $offset + (($pg - 1) * $pageby);
    // send paging info to txp:newer and txp:older
    $pageout['numPages'] = $numPages;
    $pageout['grand_total'] = $grand_total;
    $pageout['total']    = $total;
    $pageout['type'] = $type;

    global $thisarticle, $pretext;
    $pageout['article_id'] = @$thisarticle['thisid'];

    if (($pageout['article_id'] and $pretext['id'] == $pageout['article_id']))
	    $pageout['pg']       = $pg;
	elseif (!$pageout['article_id'] and empty($thisarticle))
		$pageout['pg'] = $pg;
	else
		$pageout['pg'] = 1;

    zem_paginate_set($pageout);

	if ($lim)
		return ' limit '.intval($pgoffset).','.intval($lim);
	elseif ($pgoffset)
		return ' limit '.intval($pgoffset).','.zem_page_bignum;

	return '';
}

function zem_paginate_url($pg, $article_id='') {
	global $pretext, $thisarticle, $permlink_mode;

	// author urls should use RealName, rather than username
	if (!empty($pretext['author'])) {
		$author = safe_field('RealName', 'txp_users', "name = '".doSlash($pretext['author'])."'");
	} else {
		$author = '';
	}

	if ($article_id) {
		// inside an article form, body or excerpt
		$parts = array(
			'pg'     => ($pg <= 1 ? '' : $pg),
		);
		if ($permlink_mode == 'messy') {
			$parts = array('id' => $article_id) + $parts;
			$url = hu.'index.php'.join_qs($parts + $_GET);
		}
		else {
			$url = permlinkurl_id($article_id) . join_qs($parts + $_GET);
		}
		return $url;
	}
	else {
		$parts = array(
			'pg'     => ($pg <= 1 ? '' : $pg),
			's'      => @$pretext['s'],
			'c'      => @$pretext['c'],
			'q'      => @$pretext['q'],
			'id'     => @$pretext['id'],
			'author' => $author
		);
		$parts = $parts + $_GET;
		return pagelinkurl($parts);
	}

}
";s:12:"code_restore";s:7277:"
define('zem_page_bignum', '999999999999');

// -------------------------------------------------------------

	function zem_next($atts, $thing, $self)
	{
		global $thispage, $zem_thispage_a, $pretext, $permlink_mode, $thisarticle;

		if (empty($pretext['secondpass'])) {
			if (!isset($thisarticle['is_first']))
				return $self;
			$atts['article_id'] = $thisarticle['thisid'];
			return zem_paginate_self(__FUNCTION__, $atts, $thing);
		}

		extract(lAtts(array(
			'showalways' => 0,
			'text' => $thing,
			'article_id' => '',
			'debug' => 0,
		), $atts));


		$pageinfo = zem_paginate_get($article_id);

		$numPages = $pageinfo['numPages'];
		$pg				= $pageinfo['pg'];

		if ($numPages > 1 and $pg > 1)
		{
			$nextpg = ($pg - 1 == 1) ? 0 : ($pg - 1);

			$url = zem_paginate_url($nextpg, $article_id);

			if ($text)
			{
				return '<a href="'.$url.'"'.
					(empty($title) ? '' : ' title="'.$title.'"').
					'>'.parse($text).'</a>';
			}

			return $url;
		}

		return ($showalways) ? parse($text) : '';
	}


// -------------------------------------------------------------

	function zem_prev($atts, $thing, $self)
	{
		global $thispage, $pretext, $permlink_mode, $thisarticle;

		if (empty($pretext['secondpass'])) {
			if (!isset($thisarticle['is_first']))
				return $self;
			$atts['article_id'] = $thisarticle['thisid'];
			return zem_paginate_self(__FUNCTION__, $atts, $thing);
		}

		extract(lAtts(array(
			'showalways' => 0,
			'text' => $thing,
			'article_id' => '',
			'debug' => 0,
		), $atts));

		$pageinfo = zem_paginate_get($article_id);

		$numPages = $pageinfo['numPages'];
		$pg				= $pageinfo['pg'];

		if ($numPages > 1 and $pg != $numPages)
		{
			$nextpg = $pg + 1;

			$url = zem_paginate_url($nextpg, $article_id);

			if ($text)
			{
				return '<a href="'.$url.'"'.
					(empty($title) ? '' : ' title="'.$title.'"').
					'>'.parse($text).'</a>';
			}

			return $url;
		}

		return ($showalways) ? parse($text) : '';
	}

// -------------------------------------------------------------

function zem_pages($atts, $thing, $self) {
	global $thispage, $pretext, $permlink_mode, $thisarticle;

	if (empty($pretext['secondpass'])) {
		if (!isset($thisarticle['is_first']))
			return $self;
		$atts['article_id'] = $thisarticle['thisid'];
		return zem_paginate_self(__FUNCTION__, $atts, $thing);
	}

	extract(lAtts(array(
		'max' => 10,
		'min' => 3,
		'class' => __FUNCTION__,
		'activeclass' => 'active',
		'wraptag' => 'span',
		'break' => sp,
		'ellipsis' => '&#8230;',
		'ends' => 0,
		'article_id' => '',
	), $atts));

	$max = max($max, 3);

	$pageinfo = zem_paginate_get($article_id);

	$numPages = $pageinfo['numPages'];
	$pg				= $pageinfo['pg'];

	$out = array();
	if ($numPages >= $min) {
		if (!$pg)
			$pg = 1;

		$from = 1;
		$to = $numPages;
		if ($numPages - $from >= $max) {
			$lft = max(1, $numPages - $max);
			$rgt = min($numPages, $max);

			$from = min($lft, max(1, $pg - floor($max/2)));
			$to = max($rgt, min($numPages, $pg + ceil($max/2) - 1));
		}

		if ($from > 1) {
			if ($ends)
				$out[] = '<a href="'.zem_paginate_url(1, $article_id).'">1</a>';
			if ($ellipsis)
				$out[] = $ellipsis;
		}

		for ($i = $from; $i <= $to; $i++) {
			$cl = ($pg == $i and $activeclass) ? ' class="'.$activeclass.'"' : '';
			$link = '<a href="'.zem_paginate_url($i, $article_id).'"'.$cl.'>'.$i.'</a>';
			$out[] = $link;
		}

		if ($to < $numPages) {
			if ($ellipsis)
				$out[] = $ellipsis;
			if ($ends)
				$out[] = '<a href="'.zem_paginate_url($numPages, $article_id).'">'.$numPages.'</a>';
		}

		return doWrap($out, $wraptag, $break, $class);
	}

}

// aliases for backwards compatibility
function zem_newer($atts, $thing, $self) {
	return zem_next($atts, $thing, $self);
}

function zem_older($atts, $thing, $self) {
	return zem_prev($atts, $thing, $self);
}

function zem_result_count($atts, $thing, $self) {
	global $thispage, $pretext, $permlink_mode;

	if (empty($pretext['secondpass']) and empty($thispage))
		return $self;

	extract(lAtts(array(
		'class' => __FUNCTION__,
		'wraptag' => 'span',
		'text' => '{total} items found',
		'text_single' => '{total} item found',
	), $atts));

	$total = @$thispage['grand_total'];

	$vars = array('{total}' => intval($total));

	if ($total == 1)
		$out = strtr($text_single, $vars);
	else
		$out = strtr($text, $vars);

	return doTag($out, $wraptag, $class);

}

function zem_paginate_self($tag, $atts, $thing) {
	$a = '';
	foreach ($atts as $k=>$v)
		$a .= ' '.$k.'="'.$v.'"';
	if ($thing)
		return '<txp:'.$tag.$a.'>'.$thing.'</txp:'.$tag.'>';
	return '<txp:'.$tag.$a.' />';
}

function zem_paginate_get($article_id=NULL) {
	if ($article_id) {
		global $zem_thispage_a;
		return @$zem_thispage_a[$article_id];
	}
	else {
		global $thispage;
		return $thispage;
	}
}

function zem_paginate_set($pageinfo) {
	global $thisarticle;

	if (isset($thisarticle['is_first'])) {
		$thisid = $thisarticle['thisid'];
		global $zem_thispage_a;
		if (empty($zem_thispage_a[$thisid]) or $zem_thispage_a[$thisid]['type'] != $pageinfo['type'])
			$zem_thispage_a[$thisid] = $pageinfo;
	}
	else {
		global $thispage;
		if (empty($thispage) or @$thispage['type'] != $pageinfo['type']) {
			$thispage = $pageinfo;
		}
	}
}

function zem_paginate_limit($lim, $grand_total, $offset=0, $pageby=0, $type='') {

	if (!$grand_total)
		return '';

	$limit = (intval($lim) ? intval($lim) : intval($grand_total));

    if (!$pageby)
	    $pageby = $limit;
    $pg = gps('pg');

    $total = $grand_total - $offset;
    $numPages = intval(ceil($total/$pageby));
    $pg = (!$pg) ? 1 : $pg;
    $pgoffset = $offset + (($pg - 1) * $pageby);
    // send paging info to txp:newer and txp:older
    $pageout['numPages'] = $numPages;
    $pageout['grand_total'] = $grand_total;
    $pageout['total']    = $total;
    $pageout['type'] = $type;

    global $thisarticle, $pretext;
    $pageout['article_id'] = @$thisarticle['thisid'];

    if (($pageout['article_id'] and $pretext['id'] == $pageout['article_id']))
	    $pageout['pg']       = $pg;
	elseif (!$pageout['article_id'] and empty($thisarticle))
		$pageout['pg'] = $pg;
	else
		$pageout['pg'] = 1;

    zem_paginate_set($pageout);

	if ($lim)
		return ' limit '.intval($pgoffset).','.intval($lim);
	elseif ($pgoffset)
		return ' limit '.intval($pgoffset).','.zem_page_bignum;

	return '';
}

function zem_paginate_url($pg, $article_id='') {
	global $pretext, $thisarticle, $permlink_mode;

	// author urls should use RealName, rather than username
	if (!empty($pretext['author'])) {
		$author = safe_field('RealName', 'txp_users', "name = '".doSlash($pretext['author'])."'");
	} else {
		$author = '';
	}

	if ($article_id) {
		// inside an article form, body or excerpt
		$parts = array(
			'pg'     => ($pg <= 1 ? '' : $pg),
		);
		if ($permlink_mode == 'messy') {
			$parts = array('id' => $article_id) + $parts;
			$url = hu.'index.php'.join_qs($parts + $_GET);
		}
		else {
			$url = permlinkurl_id($article_id) . join_qs($parts + $_GET);
		}
		return $url;
	}
	else {
		$parts = array(
			'pg'     => ($pg <= 1 ? '' : $pg),
			's'      => @$pretext['s'],
			'c'      => @$pretext['c'],
			'q'      => @$pretext['q'],
			'id'     => @$pretext['id'],
			'author' => $author
		);
		$parts = $parts + $_GET;
		return pagelinkurl($parts);
	}

}
";s:8:"code_md5";s:32:"60bdce81844a16de35843171416412c5";s:4:"type";s:1:"0";}